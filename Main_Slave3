/*
 * Mini Proyecto 1: Slave3_temp
 * Luis José Archila, 20403
 * Electrónica Digital 2
 */

/*----------------------------------------------------------------------------*/
/*                           BITS DE CONFIGURACIÓN                            */
/*----------------------------------------------------------------------------*/

// PIC16F887 Configuration Bit Settings

// 'C' source line config statements

// CONFIG1
#pragma config FOSC = INTRC_NOCLKOUT// Oscillator Selection bits (INTOSCIO oscillator: I/O function on RA6/OSC2/CLKOUT pin, I/O function on RA7/OSC1/CLKIN)
#pragma config WDTE = OFF       // Watchdog Timer Enable bit (WDT disabled and can be enabled by SWDTEN bit of the WDTCON register)
#pragma config PWRTE = OFF      // Power-up Timer Enable bit (PWRT disabled)
#pragma config MCLRE = OFF      // RE3/MCLR pin function select bit (RE3/MCLR pin function is digital input, MCLR internally tied to VDD)
#pragma config CP = OFF         // Code Protection bit (Program memory code protection is disabled)
#pragma config CPD = OFF        // Data Code Protection bit (Data memory code protection is disabled)
#pragma config BOREN = OFF      // Brown Out Reset Selection bits (BOR disabled)
#pragma config IESO = OFF       // Internal External Switchover bit (Internal/External Switchover mode is disabled)
#pragma config FCMEN = ON      // Fail-Safe Clock Monitor Enabled bit (Fail-Safe Clock Monitor is disabled)
#pragma config LVP = ON        // Low Voltage Programming Enable bit (RB3 pin has digital I/O, HV on MCLR must be used for programming)

// CONFIG2
#pragma config BOR4V = BOR40V   // Brown-out Reset Selection bit (Brown-out Reset set to 4.0V)
#pragma config WRT = OFF        // Flash Program Memory Self Write Enable bits (Write protection off)

// #pragma config statements should precede project file includes.
// Use project enums instead of #define for ON and OFF.

#include <xc.h>
#include <stdint.h>
#include <pic16f887.h>
#include "ADC_conf.h"
#include "SPI_conf.h"

#define _XTAL_FREQ 1000000


/*----------------------------------------------------------------------------*/
/*                                  VARIABLES                                 */
/*----------------------------------------------------------------------------*/
uint8_t temp, temp1, yo;


/*----------------------------------------------------------------------------*/
/*                                 PROTOTIPOS                                 */
/*----------------------------------------------------------------------------*/
void setup(void);


/*----------------------------------------------------------------------------*/
/*                               INTERRUPCIONES                               */
/*----------------------------------------------------------------------------*/

void __interrupt() isr (void)
{
    if (PIR1bits.ADIF)
    {
        temp = ADRESH;
        PIR1bits.ADIF = 0;
    }
    
    if (SSPIF == 1)
    {
        yo = SSPBUF;
        SSPBUF = temp;
        SSPIF = 0;
    }
}



/*----------------------------------------------------------------------------*/
/*                                  MAIN LOOP                                 */
/*----------------------------------------------------------------------------*/

void main(void)
{
    setup();
    SPI_SlaveMode();
    adc();
    
    ADCON0bits.GO = 1;
    
    while (1)
    {   
        if (ADCON0bits.GO == 0)
        {
            __delay_us(50);
            ADCON0bits.GO = 1;
        }
        
        PORTD = temp;
                
        /* ---- mapeo ---- */
        temp1 = temp*500/256;
        
        
        /* ---- Semaforo ---- */
        if (temp1 < 24)
        {
            PORTCbits.RC0 = 1;
            PORTCbits.RC1 = 0;
            PORTCbits.RC2 = 0;
        }
        else if (temp1>=24 && temp1<30)
        {
            PORTCbits.RC0 = 0;
            PORTCbits.RC1 = 1;
            PORTCbits.RC2 = 0;
        }
        else if (temp1 >= 30)
        {
            PORTCbits.RC0 = 0;
            PORTCbits.RC1 = 0;
            PORTCbits.RC2 = 1;
        }
    }
}


/*----------------------------------------------------------------------------*/
/*                                  FUNCIONES                                 */
/*----------------------------------------------------------------------------*/

void setup(void)
{
    // port_conf
    ANSEL = 0;    //AN13 como entrada
    ANSELH = 0b100000;
    
    TRISA = 0b00100001;    //SS como entrada
    TRISB = 0b100000;
    TRISC = 0b00011000; //entrada SCK
    TRISD = 0;
    TRISE = 0;
    
    PORTA = 0;
    PORTB = 0;
    PORTC = 0;
    PORTD = 0;
    PORTE = 0;

    
    //osc_conf
    OSCCONbits.IRCF = 0b100; //1 MHz
    OSCCONbits.SCS = 1;      //internal used for system clk
    

    INTCONbits.GIE = 1;
    INTCONbits.PEIE = 1;
    PIE1bits.ADIE = 1;
    
    PIE1bits.SSPIE = 1;
    PIR1bits.SSPIF = 0;
    
    return;
}
