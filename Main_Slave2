/*
 * Mini Proyecto 1: Slave2_cont
 * Luis José Archila, 20403
 * Electrónica Digital 2
 */

/*----------------------------------------------------------------------------*/
/*                           BITS DE CONFIGURACIÓN                            */
/*----------------------------------------------------------------------------*/

// PIC16F887 Configuration Bit Settings

// 'C' source line config statements

// CONFIG1
#pragma config FOSC = INTRC_NOCLKOUT// Oscillator Selection bits (INTOSCIO oscillator: I/O function on RA6/OSC2/CLKOUT pin, I/O function on RA7/OSC1/CLKIN)
#pragma config WDTE = OFF       // Watchdog Timer Enable bit (WDT disabled and can be enabled by SWDTEN bit of the WDTCON register)
#pragma config PWRTE = OFF      // Power-up Timer Enable bit (PWRT disabled)
#pragma config MCLRE = OFF      // RE3/MCLR pin function select bit (RE3/MCLR pin function is digital input, MCLR internally tied to VDD)
#pragma config CP = OFF         // Code Protection bit (Program memory code protection is disabled)
#pragma config CPD = OFF        // Data Code Protection bit (Data memory code protection is disabled)
#pragma config BOREN = OFF      // Brown Out Reset Selection bits (BOR disabled)
#pragma config IESO = OFF       // Internal External Switchover bit (Internal/External Switchover mode is disabled)
#pragma config FCMEN = OFF      // Fail-Safe Clock Monitor Enabled bit (Fail-Safe Clock Monitor is disabled)
#pragma config LVP = OFF        // Low Voltage Programming Enable bit (RB3 pin has digital I/O, HV on MCLR must be used for programming)

// CONFIG2
#pragma config BOR4V = BOR40V   // Brown-out Reset Selection bit (Brown-out Reset set to 4.0V)
#pragma config WRT = OFF        // Flash Program Memory Self Write Enable bits (Write protection off)

// #pragma config statements should precede project file includes.
// Use project enums instead of #define for ON and OFF.

#include <xc.h>
#include <stdint.h>
#include <pic16f887.h>
#include "SPI_conf.h"

#define _XTAL_FREQ 1000000


/*----------------------------------------------------------------------------*/
/*                                  VARIABLES                                 */
/*----------------------------------------------------------------------------*/
uint8_t cont, yo;


/*----------------------------------------------------------------------------*/
/*                                 PROTOTIPOS                                 */
/*----------------------------------------------------------------------------*/

void setup(void);



/*----------------------------------------------------------------------------*/
/*                               INTERRUPCIONES                               */
/*----------------------------------------------------------------------------*/

void __interrupt() isr (void)
{

    if (INTCONbits.RBIF)
    {
        if (PORTBbits.RB3 == 0)
        {
            cont = cont++;
        }
        
        if (PORTBbits.RB0 == 0)
        {
            cont = cont--;
        }
        
        INTCONbits.RBIF = 0; 
    }

    if (SSPIF == 1)
    {
        yo = SSPBUF;
        SSPBUF = cont;
        SSPIF = 0;
    }
}



/*----------------------------------------------------------------------------*/
/*                                  MAIN LOOP                                 */
/*----------------------------------------------------------------------------*/

void main(void)
{
    setup();
    SPI_SlaveMode();
    
    while (1)
    {
        PORTD = cont;
    }
}


/*----------------------------------------------------------------------------*/
/*                                  FUNCIONES                                 */
/*----------------------------------------------------------------------------*/

void setup(void)
{
    // port_conf
    ANSEL = 0;
    ANSELH = 0;
    
    TRISA = 0b00100000;    //SS como entrada
    TRISB = 0b1001;   //RB3 Y RB0 como entradas
    TRISC = 0b00011000; //entrada SCK, SDI
    TRISD = 0;
    TRISE = 0;
    
    PORTA = 0;
    PORTB = 0;
    PORTC = 0;
    PORTD = 0;
    PORTE = 0;

    
    //osc_conf
    OSCCONbits.IRCF = 0b100; //1 MHz
    OSCCONbits.SCS = 1;      //internal used for system clk


    //interrupciones PortB
    INTCONbits.RBIE = 1;
    IOCBbits.IOCB0 = 1;
    IOCBbits.IOCB3 = 1;
    INTCONbits.RBIF=0;
    
    INTCONbits.GIE = 1;
    INTCONbits.PEIE = 1;
    

    //habilitar resistencias pull-up en PortB
    OPTION_REGbits.nRBPU = 0;
    WPUBbits.WPUB0  = 1;
    WPUBbits.WPUB3  = 1;

    //SPI
    PIE1bits.SSPIE = 1;
    PIR1bits.SSPIF = 0;
    
    return;
}
